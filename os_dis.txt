
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x00000565 memsz 0x00000565 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x0000010c memsz 0x0000010c flags r--
    LOAD off    0x00003000 vaddr 0x0000a000 paddr 0x0000a000 align 2**12
         filesz 0x00002910 memsz 0x00008800 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000565  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000001a  00009000  00009000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .eh_frame     000000f0  0000901c  0000901c  0000201c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00002910  0000a000  0000a000  00003000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00005800  0000d000  0000d000  00005910  2**12
                  ALLOC
  5 .comment      00000026  00000000  00000000  00005910  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00005938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000004a3  00000000  00000000  00005978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000198  00000000  00000000  00005e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000001f9  00000000  00000000  00005fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000027c  00000000  00000000  000061ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 00000033  00000000  00000000  00006428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.o
00007c0f l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e92 l       .text	00000000 gdt_desc
00007e98 l       .text	00000000 idt_desc
00007e52 l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000c908 l     O .data	00000004 row.1
0000a000 l     O .data	00001000 pg_table
0000c90c l     O .data	00000004 task_tss.0
0000c108 g     O .data	00000800 gdt_table
0000f000 g     O .bss	00001000 task0_dpl3_stack
00011000 g     O .bss	00001000 task1_dpl3_stack
00007f3a g     F .text	0000002e sys_show
0000c010 g     O .data	00000010 task1_ldt_table
00007f68 g     F .text	0000002e task_0
0000c020 g     O .data	00000068 task0_tss
0000d000 g     O .bss	00001000 map_phy_buffer
0000801b g     F .text	0000014a os_init
00007e5e g       .text	00000000 timer_init
00010000 g     O .bss	00001000 task1_dpl0_stack
0000c0a0 g     O .data	00000068 task1_tss
0000c000 g     O .data	00000010 task0_ldt_table
00007e9e g     F .text	0000009c do_syscall
00007c00 g       .text	00000000 _start
00007fc4 g     F .text	0000001f outb
0000d000 g       .bss	00000000 __bss_start
0000b000 g     O .data	00001000 pg_dir
0000c910 g       .data	00000000 _edata
00012800 g       .bss	00000000 _end
00007e72 g       .text	00000000 syscall_handler
00007f96 g     F .text	0000002e task_1
00012000 g     O .bss	00000800 idt_table
0000e000 g     O .bss	00001000 task0_dpl0_stack
00007fe3 g     F .text	00000038 task_sched



Disassembly of section .text:

00007c00 <_start>:

	// 以下是代码区
 	.text
_start:
	// x86使用段寄存器中的内容作为内存访问的基址，因此以下预先设置好
	mov $0, %ax				// 设置代码段
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds			// 设置数据段
	mov %ax, %es			// 设置数据段
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss			// 设置栈段
    7c07:	8e d0                	mov    %eax,%ss
	mov $_start, %esp		// 设置栈的起始地址
    7c09:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c0f <read_self_all>:

	// 计算机上电启动后，只取512字节到0x7c00处，即相当于自己只有个头在内存，所以下面全部出来
	// 将自己的其余部分读取到0x7E00处，即0x7c00的后512字节
read_self_all:
	mov $_start_32, %bx	// 读取到的内存地址
    7c0f:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx		// ch:磁道号，cl起始扇区号
    7c14:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x0240, %ax	// ah: 0x42读磁盘命令, al=0x40 64个扇区，多读一些, 32KB
	mov $0x80, %dx		// dh: 磁头号，dl驱动器号0x80(磁盘1)
    7c1a:	00 cd                	add    %cl,%ch
	int $0x0013
    7c1c:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all	// 读取失败，则重复

	//  加载idt和gdt表, 进入保护模式
	cli					// 关中断
    7c1f:	fa                   	cli
	lgdt gdt_desc		// 加载gdt表，原来写的是[gdt_desc]，在windows上不识别，所以改了
    7c20:	0f 01 16             	lgdtl  (%esi)
    7c23:	92                   	xchg   %eax,%edx
    7c24:	7e 0f                	jle    7c35 <read_self_all+0x26>
	lidt idt_desc		// 加载idt表，原来写的是[idt_desc]，在windows上不识别，所以改了
    7c26:	01 1e                	add    %ebx,(%esi)
    7c28:	98                   	cwtl
    7c29:	7e 66                	jle    7c91 <read_self_all+0x82>
	mov $1, %eax
    7c2b:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax			// 设置PE位，进入保护模式
    7c30:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32	// 进入32位保护模式代码，可以运行32位指令
    7c33:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:
	// 32位保护模式，位于512字节后
	.code32
	.text
_start_32:
	// 重新加载数据段寄存器
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov $_start, %esp
    7e0a:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	// 跳转到c语言中运行
	call os_init
    7e0f:	e8 07 02 00 00       	call   801b <os_init>

	// 打开分页机制
	mov $pg_dir, %eax
    7e14:	b8 00 b0 00 00       	mov    $0xb000,%eax
	mov %eax, %cr3
    7e19:	0f 22 d8             	mov    %eax,%cr3

	mov %cr4, %eax
    7e1c:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax			// PSE位，支持4MB分页
    7e1f:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e22:	0f 22 e0             	mov    %eax,%cr4

	mov %cr0, %eax
    7e25:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax		// 打开PG位，开启分页机制
    7e28:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e2d:	0f 22 c0             	mov    %eax,%cr0

	// 设置当前的任务0
	// 模拟中断返回，返回至任务0，特权级3模式
	mov $TASK0_TSS_SEL, %ax		// 加载任务0对应的状态段
    7e30:	66 b8 28 00          	mov    $0x28,%ax
	ltr %ax
    7e34:	0f 00 d8             	ltr    %eax

	mov $TASK0_LDT_SEL, %ax		// 加载任务0的LDT
    7e37:	66 b8 40 00          	mov    $0x40,%ax
	lldt %ax
    7e3b:	0f 00 d0             	lldt   %eax

	// 下面模拟中断返回，从而实现从特权级0到特权级3的变化
	// 中断发生时，会自动压入原SS, ESP, EFLAGS, CS, EIP到栈中
	// push $APP_DATA_SEG
	push $TASK_DATA_SEG
    7e3e:	6a 0f                	push   $0xf
	push $task0_dpl3_stack + 1024	// 特权级3时的栈
    7e40:	68 00 f4 00 00       	push   $0xf400
	push $0x202						// EFLAGS
    7e45:	68 02 02 00 00       	push   $0x202
	//push $APP_CODE_SEG				// CPL=3时的选择子
	push $TASK_CODE_SEG
    7e4a:	6a 07                	push   $0x7
	push $task_0_entry					// eip
    7e4c:	68 52 7e 00 00       	push   $0x7e52
	iret							// 从中断返回，将切换至任务0
    7e51:	cf                   	iret

00007e52 <task_0_entry>:

task_0_entry:
	// 进入任务0时，需要重设其数据段寄存器为特权级3的
	mov %ss, %ax
    7e52:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
    7e55:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e57:	8e c0                	mov    %eax,%es
	jmp task_0			// 跳转到任务0运行
    7e59:	e9 0a 01 00 00       	jmp    7f68 <task_0>

00007e5e <timer_init>:

// 定时器0中断函数
timer_init:
	push %ds
    7e5e:	1e                   	push   %ds
	pusha						// 保护现场，段寄存器不用保存
    7e5f:	60                   	pusha

	mov $0x20, %al
    7e60:	b0 20                	mov    $0x20,%al
	outb %al, $0x20				// 发送EOI
    7e62:	e6 20                	out    %al,$0x20

	// 使用内核的数据段寄存器，因为要访问内核的数据
	mov $KERNEL_DATA_SEG, %ax
    7e64:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e68:	8e d8                	mov    %eax,%ds

	call task_sched				// 调用调试函数
    7e6a:	e8 74 01 00 00       	call   7fe3 <task_sched>
	popa						// 恢复现场
    7e6f:	61                   	popa
	pop %ds
    7e70:	1f                   	pop    %ds
	iret						// 中断返回
    7e71:	cf                   	iret

00007e72 <syscall_handler>:

syscall_handler:
	push %ds
    7e72:	1e                   	push   %ds
	pusha						// 保护现场，段寄存器不用保存
    7e73:	60                   	pusha
	mov $KERNEL_DATA_SEG, %ax
    7e74:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds				//  Push AX, CX, DX, BX, original SP, BP, SI, and DI.
    7e78:	8e d8                	mov    %eax,%ds

	mov %esp, %ebp				// 下面压栈时，esp会不断变化，所以使用ebp作为基址
    7e7a:	89 e5                	mov    %esp,%ebp
	push 13*4(%ebp)				// 提取出原压入的各项参数，再按相同的顺序压入一遍
    7e7c:	ff 75 34             	push   0x34(%ebp)
	push 12*4(%ebp)
    7e7f:	ff 75 30             	push   0x30(%ebp)
	push 11*4(%ebp)
    7e82:	ff 75 2c             	push   0x2c(%ebp)
	call do_syscall				// 调用api函数，注意这时是在特级0的模式下运行，可以做很多有需要高权限才能做的事
    7e85:	e8 14 00 00 00       	call   7e9e <do_syscall>
	add $(3*4), %esp			// 取消刚才压入的值
    7e8a:	83 c4 0c             	add    $0xc,%esp
	popa						// 恢复现场
    7e8d:	61                   	popa
	pop %ds
    7e8e:	1f                   	pop    %ds
	retf $(3*4)					// 使用远跳转
    7e8f:	ca 0c 00             	lret   $0xc

00007e92 <gdt_desc>:
    7e92:	ff 07                	incl   (%edi)
    7e94:	08 c1                	or     %al,%cl
	...

00007e98 <idt_desc>:
    7e98:	ff 07                	incl   (%edi)
    7e9a:	00 20                	add    %ah,(%eax)
    7e9c:	01 00                	add    %eax,(%eax)

00007e9e <do_syscall>:

/**
 * @brief 系统调用的API处理函数
 */
void do_syscall(int func, char *str, char color)
{
    7e9e:	55                   	push   %ebp
    7e9f:	89 e5                	mov    %esp,%ebp
    7ea1:	83 ec 14             	sub    $0x14,%esp
    7ea4:	8b 45 10             	mov    0x10(%ebp),%eax
    7ea7:	88 45 ec             	mov    %al,-0x14(%ebp)
    static int row = 1; // 初始值不能为0，否则其初始化值不确定

    if (func == 2)
    7eaa:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
    7eae:	0f 85 83 00 00 00    	jne    7f37 <do_syscall+0x99>
    {
        // 显示器共80列，25行，按字符显示，每个字符需要用两个字节表示
        unsigned short *dest = (unsigned short *)0xb8000 + 80 * row;
    7eb4:	a1 08 c9 00 00       	mov    0xc908,%eax
    7eb9:	89 c2                	mov    %eax,%edx
    7ebb:	89 d0                	mov    %edx,%eax
    7ebd:	c1 e0 02             	shl    $0x2,%eax
    7ec0:	01 d0                	add    %edx,%eax
    7ec2:	c1 e0 05             	shl    $0x5,%eax
    7ec5:	05 00 80 0b 00       	add    $0xb8000,%eax
    7eca:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (*str)
    7ecd:	eb 2a                	jmp    7ef9 <do_syscall+0x5b>
        {
            // 其中一个字节保存要显示的字符，另一个字节表示颜色
            *dest++ = *str++ | (color << 8);
    7ecf:	8b 45 0c             	mov    0xc(%ebp),%eax
    7ed2:	8d 50 01             	lea    0x1(%eax),%edx
    7ed5:	89 55 0c             	mov    %edx,0xc(%ebp)
    7ed8:	0f b6 00             	movzbl (%eax),%eax
    7edb:	66 0f be d0          	movsbw %al,%dx
    7edf:	66 0f be 45 ec       	movsbw -0x14(%ebp),%ax
    7ee4:	c1 e0 08             	shl    $0x8,%eax
    7ee7:	89 d1                	mov    %edx,%ecx
    7ee9:	09 c1                	or     %eax,%ecx
    7eeb:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7eee:	8d 50 02             	lea    0x2(%eax),%edx
    7ef1:	89 55 fc             	mov    %edx,-0x4(%ebp)
    7ef4:	89 ca                	mov    %ecx,%edx
    7ef6:	66 89 10             	mov    %dx,(%eax)
        while (*str)
    7ef9:	8b 45 0c             	mov    0xc(%ebp),%eax
    7efc:	0f b6 00             	movzbl (%eax),%eax
    7eff:	84 c0                	test   %al,%al
    7f01:	75 cc                	jne    7ecf <do_syscall+0x31>
        }

        // 逐行显示，超过一行则回到第0行再显示
        row = (row >= 25) ? 0 : row + 1;
    7f03:	a1 08 c9 00 00       	mov    0xc908,%eax
    7f08:	83 f8 18             	cmp    $0x18,%eax
    7f0b:	7f 0a                	jg     7f17 <do_syscall+0x79>
    7f0d:	a1 08 c9 00 00       	mov    0xc908,%eax
    7f12:	83 c0 01             	add    $0x1,%eax
    7f15:	eb 05                	jmp    7f1c <do_syscall+0x7e>
    7f17:	b8 00 00 00 00       	mov    $0x0,%eax
    7f1c:	a3 08 c9 00 00       	mov    %eax,0xc908

        // 加点延时，让显示慢下来
        for (int i = 0; i < 0xFFFFFF; i++)
    7f21:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7f28:	eb 04                	jmp    7f2e <do_syscall+0x90>
    7f2a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    7f2e:	81 7d f8 fe ff ff 00 	cmpl   $0xfffffe,-0x8(%ebp)
    7f35:	7e f3                	jle    7f2a <do_syscall+0x8c>
            ;
    }
}
    7f37:	90                   	nop
    7f38:	c9                   	leave
    7f39:	c3                   	ret

00007f3a <sys_show>:

/**
 * @brief 系统调用，在屏幕上显示字符串
 */
void sys_show(char *str, char color)
{
    7f3a:	55                   	push   %ebp
    7f3b:	89 e5                	mov    %esp,%ebp
    7f3d:	83 ec 14             	sub    $0x14,%esp
    7f40:	8b 45 0c             	mov    0xc(%ebp),%eax
    7f43:	88 45 ec             	mov    %al,-0x14(%ebp)
    const unsigned long sys_gate_addr[] = {0, SYSCALL_SEL}; // 使用特权级0
    7f46:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7f4d:	c7 45 fc 38 00 00 00 	movl   $0x38,-0x4(%ebp)

    // 采用调用门, 这里只支持5个参数
    // 用调用门的好处是会自动将参数复制到内核栈中，这样内核代码很好取参数
    // 而如果采用寄存器传递，取参比较困难，需要先压栈再取
    __asm__ __volatile__("push %[color];push %[str];push %[id];lcalll *(%[gate])\n\n" ::[color] "m"(color), [str] "m"(str), [id] "r"(2), [gate] "r"(sys_gate_addr));
    7f54:	ba 02 00 00 00       	mov    $0x2,%edx
    7f59:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7f5c:	ff 75 ec             	push   -0x14(%ebp)
    7f5f:	ff 75 08             	push   0x8(%ebp)
    7f62:	52                   	push   %edx
    7f63:	ff 18                	lcall  *(%eax)
}
    7f65:	90                   	nop
    7f66:	c9                   	leave
    7f67:	c3                   	ret

00007f68 <task_0>:

/**
 * @brief 任务0
 */
void task_0(void)
{
    7f68:	55                   	push   %ebp
    7f69:	89 e5                	mov    %esp,%ebp
    7f6b:	83 ec 10             	sub    $0x10,%esp
    // 加上下面这句会跑飞
    // *(unsigned char *)MAP_ADDR = 0x1;

    char *str = "task a: 1234";
    7f6e:	c7 45 f8 00 90 00 00 	movl   $0x9000,-0x8(%ebp)
    uint8_t color = 0;
    7f75:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
    for (;;)
    {
        sys_show(str, color++);
    7f79:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
    7f7d:	8d 42 01             	lea    0x1(%edx),%eax
    7f80:	88 45 ff             	mov    %al,-0x1(%ebp)
    7f83:	89 d0                	mov    %edx,%eax
    7f85:	0f be c0             	movsbl %al,%eax
    7f88:	50                   	push   %eax
    7f89:	ff 75 f8             	push   -0x8(%ebp)
    7f8c:	e8 a9 ff ff ff       	call   7f3a <sys_show>
    7f91:	83 c4 08             	add    $0x8,%esp
    7f94:	eb e3                	jmp    7f79 <task_0+0x11>

00007f96 <task_1>:

/**
 * @brief 任务1
 */
void task_1(void)
{
    7f96:	55                   	push   %ebp
    7f97:	89 e5                	mov    %esp,%ebp
    7f99:	83 ec 10             	sub    $0x10,%esp
    char *str = "task b: 5678";
    7f9c:	c7 45 f8 0d 90 00 00 	movl   $0x900d,-0x8(%ebp)
    uint8_t color = 0xff;
    7fa3:	c6 45 ff ff          	movb   $0xff,-0x1(%ebp)
    for (;;)
    {
        sys_show(str, color--);
    7fa7:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
    7fab:	8d 42 ff             	lea    -0x1(%edx),%eax
    7fae:	88 45 ff             	mov    %al,-0x1(%ebp)
    7fb1:	89 d0                	mov    %edx,%eax
    7fb3:	0f be c0             	movsbl %al,%eax
    7fb6:	50                   	push   %eax
    7fb7:	ff 75 f8             	push   -0x8(%ebp)
    7fba:	e8 7b ff ff ff       	call   7f3a <sys_show>
    7fbf:	83 c4 08             	add    $0x8,%esp
    7fc2:	eb e3                	jmp    7fa7 <task_1+0x11>

00007fc4 <outb>:
    [TASK0_LDT_SEL / 8] = {sizeof(task0_ldt_table) - 1, (uint32_t)0, 0xe200, 0x00cf},
    [TASK1_LDT_SEL / 8] = {sizeof(task0_ldt_table) - 1, (uint32_t)0, 0xe200, 0x00cf},
};

void outb(uint8_t data, uint16_t port)
{
    7fc4:	55                   	push   %ebp
    7fc5:	89 e5                	mov    %esp,%ebp
    7fc7:	83 ec 08             	sub    $0x8,%esp
    7fca:	8b 55 08             	mov    0x8(%ebp),%edx
    7fcd:	8b 45 0c             	mov    0xc(%ebp),%eax
    7fd0:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7fd3:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" : : [p] "d"(port), [v] "a"(data));
    7fd7:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7fdb:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7fdf:	ee                   	out    %al,(%dx)
}
    7fe0:	90                   	nop
    7fe1:	c9                   	leave
    7fe2:	c3                   	ret

00007fe3 <task_sched>:

void task_sched(void)
{
    7fe3:	55                   	push   %ebp
    7fe4:	89 e5                	mov    %esp,%ebp
    7fe6:	83 ec 10             	sub    $0x10,%esp
    static int task_tss = TASK0_TSS_SEL;

    // 更换当前任务的tss，然后切换过去
    task_tss = (task_tss == TASK0_TSS_SEL) ? TASK1_TSS_SEL : TASK0_TSS_SEL;
    7fe9:	a1 0c c9 00 00       	mov    0xc90c,%eax
    7fee:	83 f8 28             	cmp    $0x28,%eax
    7ff1:	75 07                	jne    7ffa <task_sched+0x17>
    7ff3:	b8 30 00 00 00       	mov    $0x30,%eax
    7ff8:	eb 05                	jmp    7fff <task_sched+0x1c>
    7ffa:	b8 28 00 00 00       	mov    $0x28,%eax
    7fff:	a3 0c c9 00 00       	mov    %eax,0xc90c
    uint32_t addr[] = {0, task_tss};
    8004:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    800b:	a1 0c c9 00 00       	mov    0xc90c,%eax
    8010:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
    8013:	8d 45 f8             	lea    -0x8(%ebp),%eax
    8016:	ff 28                	ljmp   *(%eax)
}
    8018:	90                   	nop
    8019:	c9                   	leave
    801a:	c3                   	ret

0000801b <os_init>:

void timer_init(void);
void syscall_handler(void);
void os_init(void)
{
    801b:	55                   	push   %ebp
    801c:	89 e5                	mov    %esp,%ebp
    801e:	83 ec 10             	sub    $0x10,%esp
    // 初始化8259中断控制器，打开定时器中断
    outb(0x11, 0x20);     // 开始初始化主芯片
    8021:	6a 20                	push   $0x20
    8023:	6a 11                	push   $0x11
    8025:	e8 9a ff ff ff       	call   7fc4 <outb>
    802a:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xA0);     // 初始化从芯片
    802d:	68 a0 00 00 00       	push   $0xa0
    8032:	6a 11                	push   $0x11
    8034:	e8 8b ff ff ff       	call   7fc4 <outb>
    8039:	83 c4 08             	add    $0x8,%esp
    outb(0x20, 0x21);     // 写ICW2，告诉主芯片中断向量从0x20开始
    803c:	6a 21                	push   $0x21
    803e:	6a 20                	push   $0x20
    8040:	e8 7f ff ff ff       	call   7fc4 <outb>
    8045:	83 c4 08             	add    $0x8,%esp
    outb(0x28, 0xa1);     // 写ICW2，告诉从芯片中断向量从0x28开始
    8048:	68 a1 00 00 00       	push   $0xa1
    804d:	6a 28                	push   $0x28
    804f:	e8 70 ff ff ff       	call   7fc4 <outb>
    8054:	83 c4 08             	add    $0x8,%esp
    outb((1 << 2), 0x21); // 写ICW3，告诉主芯片IRQ2上连接有从芯片
    8057:	6a 21                	push   $0x21
    8059:	6a 04                	push   $0x4
    805b:	e8 64 ff ff ff       	call   7fc4 <outb>
    8060:	83 c4 08             	add    $0x8,%esp
    outb(2, 0xa1);        // 写ICW3，告诉从芯片连接g到主芯片的IRQ2上
    8063:	68 a1 00 00 00       	push   $0xa1
    8068:	6a 02                	push   $0x2
    806a:	e8 55 ff ff ff       	call   7fc4 <outb>
    806f:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0x21);      // 写ICW4，告诉主芯片8086、普通EOI、非缓冲模式
    8072:	6a 21                	push   $0x21
    8074:	6a 01                	push   $0x1
    8076:	e8 49 ff ff ff       	call   7fc4 <outb>
    807b:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0xa1);      // 写ICW4，告诉主芯片8086、普通EOI、非缓冲模式
    807e:	68 a1 00 00 00       	push   $0xa1
    8083:	6a 01                	push   $0x1
    8085:	e8 3a ff ff ff       	call   7fc4 <outb>
    808a:	83 c4 08             	add    $0x8,%esp
    outb(0xfe, 0x21);     // 开定时中断，其它屏幕
    808d:	6a 21                	push   $0x21
    808f:	68 fe 00 00 00       	push   $0xfe
    8094:	e8 2b ff ff ff       	call   7fc4 <outb>
    8099:	83 c4 08             	add    $0x8,%esp
    outb(0xff, 0xa1);     // 屏幕所有中断
    809c:	68 a1 00 00 00       	push   $0xa1
    80a1:	68 ff 00 00 00       	push   $0xff
    80a6:	e8 19 ff ff ff       	call   7fc4 <outb>
    80ab:	83 c4 08             	add    $0x8,%esp

    // 设置定时器，每100ms中断一次
    int tmo = (1193180 / 10); // 时钟频率为1193180
    80ae:	c7 45 fc 16 d2 01 00 	movl   $0x1d216,-0x4(%ebp)
    outb(0x36, 0x43);         // 二进制计数、模式3、通道0
    80b5:	6a 43                	push   $0x43
    80b7:	6a 36                	push   $0x36
    80b9:	e8 06 ff ff ff       	call   7fc4 <outb>
    80be:	83 c4 08             	add    $0x8,%esp
    outb((uint8_t)tmo, 0x40);
    80c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
    80c4:	0f b6 c0             	movzbl %al,%eax
    80c7:	6a 40                	push   $0x40
    80c9:	50                   	push   %eax
    80ca:	e8 f5 fe ff ff       	call   7fc4 <outb>
    80cf:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8, 0x40);
    80d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
    80d5:	c1 f8 08             	sar    $0x8,%eax
    80d8:	0f b6 c0             	movzbl %al,%eax
    80db:	6a 40                	push   $0x40
    80dd:	50                   	push   %eax
    80de:	e8 e1 fe ff ff       	call   7fc4 <outb>
    80e3:	83 c4 08             	add    $0x8,%esp

    // 添加中断
    idt_table[0x20].offset_h = (uint32_t)timer_init >> 16;
    80e6:	b8 5e 7e 00 00       	mov    $0x7e5e,%eax
    80eb:	c1 e8 10             	shr    $0x10,%eax
    80ee:	66 a3 06 21 01 00    	mov    %ax,0x12106
    idt_table[0x20].offset_l = (uint32_t)timer_init & 0xffff;
    80f4:	b8 5e 7e 00 00       	mov    $0x7e5e,%eax
    80f9:	66 a3 00 21 01 00    	mov    %ax,0x12100
    idt_table[0x20].selector = KERNEL_CODE_SEG;
    80ff:	66 c7 05 02 21 01 00 	movw   $0x8,0x12102
    8106:	08 00 
    idt_table[0x20].attr = 0x8E00; // 存在，DPL=0, 中断门
    8108:	66 c7 05 04 21 01 00 	movw   $0x8e00,0x12104
    810f:	00 8e 

    // 添加任务和系统调用
    gdt_table[TASK0_TSS_SEL / 8].base_l = (uint16_t)(uint32_t)task0_tss;
    8111:	b8 20 c0 00 00       	mov    $0xc020,%eax
    8116:	66 a3 32 c1 00 00    	mov    %ax,0xc132
    gdt_table[TASK1_TSS_SEL / 8].base_l = (uint16_t)(uint32_t)task1_tss;
    811c:	b8 a0 c0 00 00       	mov    $0xc0a0,%eax
    8121:	66 a3 3a c1 00 00    	mov    %ax,0xc13a
    gdt_table[SYSCALL_SEL / 8].limit_l = (uint16_t)(uint32_t)syscall_handler;
    8127:	b8 72 7e 00 00       	mov    $0x7e72,%eax
    812c:	66 a3 40 c1 00 00    	mov    %ax,0xc140
    gdt_table[TASK0_LDT_SEL / 8].base_l = (uint32_t)task0_ldt_table;
    8132:	b8 00 c0 00 00       	mov    $0xc000,%eax
    8137:	66 a3 4a c1 00 00    	mov    %ax,0xc14a
    gdt_table[TASK1_LDT_SEL / 8].base_l = (uint32_t)task1_ldt_table;
    813d:	b8 10 c0 00 00       	mov    $0xc010,%eax
    8142:	66 a3 52 c1 00 00    	mov    %ax,0xc152

    // 虚拟内存
    // 0x80000000开始的4MB区域的映射
    pg_dir[MAP_ADDR >> 22] = (uint32_t)pg_table | PDE_P | PDE_W | PDE_U;
    8148:	b8 00 a0 00 00       	mov    $0xa000,%eax
    814d:	83 c8 07             	or     $0x7,%eax
    8150:	a3 00 b8 00 00       	mov    %eax,0xb800
    pg_table[(MAP_ADDR >> 12) & 0x3FF] = (uint32_t)map_phy_buffer | PDE_P | PDE_W;
    8155:	b8 00 d0 00 00       	mov    $0xd000,%eax
    815a:	83 c8 03             	or     $0x3,%eax
    815d:	a3 00 a0 00 00       	mov    %eax,0xa000
    8162:	90                   	nop
    8163:	c9                   	leave
    8164:	c3                   	ret
